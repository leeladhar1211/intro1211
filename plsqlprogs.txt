DELETE FROM top_dogs;
DEFINE p_num = 5
DECLARE
v_num NUMBER(3) := &p_num;
v_sal employees.salary%TYPE;
CURSOR emp_cursor IS
SELECT distinct salary
FROM employees
ORDER BY salary DESC;     ---for update of salary nowait(locking mechanasim)
BEGIN
OPEN emp_cursor;
FETCH emp_cursor INTO v_sal;
WHILE emp_cursor%ROWCOUNT <= v_num AND emp_cursor%FOUND LOOP
INSERT INTO top_dogs (salary)
VALUES (v_sal);
FETCH emp_cursor INTO v_sal; ---where current of emp_cursor
END LOOP;
CLOSE emp_cursor;
COMMIT;
END;
/
------------------------------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON
SET ECHO OFF
DEFINE p_dept_no = 10
DECLARE
v_deptno NUMBER(4) := &p_dept_no;
v_ename employees.last_name%TYPE;
v_sal employees.salary%TYPE;
v_manager employees.manager_id%TYPE;
CURSOR emp_cursor IS
SELECT last_name, salary,manager_id
FROM employees
WHERE department_id = v_deptno;
BEGIN
OPEN emp_cursor;
FETCH emp_cursor INTO v_ename, v_sal,v_manager;
WHILE emp_cursor%FOUND LOOP
IF v_sal < 5000 AND (v_manager = 101 OR v_manager = 124) THEN
DBMS_OUTPUT.PUT_LINE (v_ename || ’ Due for a raise’);
ELSE
DBMS_OUTPUT.PUT_LINE (v_ename || ’ Not Due for a raise’);
END IF;
FETCH emp_cursor INTO v_ename, v_sal,v_manager;
END LOOP;
CLOSE emp_cursor;
END;
/
----------------------------------------------------------------------------------------------------------------------------------------
1. In a loop, use a cursor to retrieve the department number and the department name from the
DEPARTMENTS table for those departments whose DEPARTMENT_ID is less than 100. Pass the
department number to another cursor to retrieve from the EMPLOYEES table the details of
employee last name, job, hire date, and salary of those employees whose EMPLOYEE_ID is less
than 120 and who work in that department

SET SERVEROUTPUT ON
DECLARE
CURSOR DEPT_CUR IS
SELECT DEPARTMENT_ID DEPTNO, DEPARTMENT_NAME DNAME
FROM DEPARTMENTS
WHERE DEPARTMENT_ID < 100;
CURSOR EMP_CUR (P_DEPTNO NUMBER) IS
SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID = P_DEPTNO AND EMPLOYEE_ID < 120;
BEGIN
FOR DEPT_REC IN DEPT_CUR LOOP
DBMS_OUTPUT.PUT_LINE
(’DEPARTMENT NUMBER: ’ || DEPT_REC.DEPTNO ||’
DEPARTMENT NAME: ’ || DEPT_REC.DNAME);
FOR EMP_REC IN EMP_CUR(DEPT_REC.DEPTNO) LOOP
DBMS_OUTPUT.PUT_LINE
(EMP_REC.LAST_NAME ||’ ’||EMP_REC.JOB_ID||’
’||EMP_REC.HIRE_DATE||’ ’||EMP_REC.SALARY);
END LOOP;
DBMS_OUTPUT.PUT_LINE(CHR(10));
END LOOP;
END;
/
---------------------------------------------------------------------------------------------------------------------------------------
1. Write a PL/SQL block to select the name of the employee with a given salary value.
a. Use the DEFINE command to provide the salary. Pass the value to the PL/SQL block
through a iSQL*Plus substitution variable. If the salary entered returns more than one row,
handle the exception with an appropriate exception handler and insert into the MESSAGES
table the message “More than one employee with a salary of <salary>.”
b. If the salary entered does not return any rows, handle the exception with an appropriate
exception handler and insert into the MESSAGES table the message “No employee with a
salary of <salary>.”
c. If the salary entered returns only one row, insert into the MESSAGES table the employee’s
name and the salary amount.
d. Handle any other exception with an appropriate exception handler and insert into the
MESSAGES table the message “Some other error occurred.”
e. Test the block for a variety of test cases. Display the rows from the MESSAGES table to check
whether the PL/SQL block has executed successfully

SET VERIFY OFF
DEFINE p_sal = 6000
DECLARE
v_ename employees.last_name%TYPE;
v_sal employees.salary%TYPE := &p_sal;
BEGIN
SELECT last_name
INTO v_ename
FROM employees
WHERE salary = v_sal;
INSERT INTO messages (results)
VALUES (v_ename || ’ - ’ || v_sal);
EXCEPTION
WHEN no_data_found THEN
INSERT INTO messages (results)
VALUES (’No employee with a salary of ’|| TO_CHAR(v_sal));
WHEN too_many_rows THEN
INSERT INTO messages (results)
VALUES (’More than one employee with a salary of ’||
TO_CHAR(v_sal));
WHEN others THEN
INSERT INTO messages (results)
VALUES (’Some other error occurred.’);
END;
/
SET VERIFY ON
---------------------------------------------------------------------------------------------------------------------------------
2. Modify the code in p3q3.sql to add an exception handler.
a. Use the DEFINE command to provide the department ID and department location. Pass the
values to the PL/SQL block through a iSQL*Plus substitution variables.
b. Write an exception handler for the error to pass a message to the user that the specified
department does not exist. Use a bind variable to pass the message to the user.
c. Execute the PL/SQL block by entering a department that does not exist.
SET VERIFY OFF
VARIABLE g_message VARCHAR2(100)
DEFINE p_deptno = 200
DEFINE p_loc = 1400
DECLARE
e_invalid_dept EXCEPTION;
v_deptno departments.department_id%TYPE := &p_deptno;
BEGIN
UPDATE departments
SET location_id = &p_loc
WHERE department_id = &p_deptno;
COMMIT;
IF SQL%NOTFOUND THEN
raise e_invalid_dept;
END IF;
EXCEPTION
WHEN e_invalid_dept THEN
:g_message := ’Department ’|| TO_CHAR(v_deptno) ||’ is an
invalid department’;
END;
/
SET VERIFY ON
--------------------------------------------------------------------------------------------------------------------------------
•Create a procedure called UPD_JOB to modify a job in the JOBS table.
a. Create a procedure called UPD_JOB to update the job title. Provide the job ID and a new
title, using two parameters. Include the necessary exception handling if no update occurs.

CREATE OR REPLACE PROCEDURE upd_job
(p_jobid IN jobs.job_id%TYPE,
p_jobtitle IN jobs.job_title%TYPE)
IS
BEGIN
UPDATE jobs
SET job_title = p_jobtitle
WHERE job_id = p_jobid;
IF SQL%NOTFOUND THEN
RAISE_APPLICATION_ERROR(-20202,’No job updated.’);
END IF;
END upd_job;

EXECUTE upd_job (’IT_DBA’, ’Data Administrator’)
SELECT * FROM jobs WHERE job_id
-------------------------------------------------------------------------------------------------------------------------------------
4. Create a procedure called QUERY_EMP to query the EMPLOYEES table, retrieving the salary and
job ID for an employee when provided with the employee number.
a. Create a procedure that returns a value from the SALARY and JOB_ID columns for a
specified employee ID.
Use host variables for the two OUT parameters salary and job ID.

CREATE OR REPLACE PROCEDURE query_emp
(p_empid IN employees.employee_id%TYPE,
p_sal OUT employees.salary%TYPE,
p_job OUT employees.job_id%TYPE)
IS
BEGIN
SELECT salary, job_id
INTO p_sal, p_job
FROM employees
WHERE employee_id = p_empid;
END query_emp;
b. Compile the code, invoke the procedure to display the salary and job ID for employee ID
120.

Procedure created.
VARIABLE g_sal NUMBER
VARIABLE g_job VARCHAR2(15)
EXECUTE query_emp (120, :g_sal, :g_job)
PRINT g_sal
PRINT g_job
--------------------------------------------------------------------------------------------------------------------------------------
1. Create and invoke the Q_JOB function to return a job title.
a. Create a function called Q_JOB to return a job title to a host variable.

CREATE OR REPLACE FUNCTION q_job
(p_jobid IN jobs.job_id%TYPE)
RETURN VARCHAR2
IS
v_jobtitle jobs.job_title%TYPE;
BEGIN
SELECT job_title
INTO v_jobtitle
FROM jobs
WHERE job_id = p_jobid;
RETURN (v_jobtitle);
END q_job;

Function created.
VARIABLE g_title VARCHAR2(30)
EXECUTE :g_title := q_job (’SA_REP’)
PRINT g_title
----------------------------------------------------------------------------------------------------------------------------------------
Create a procedure, NEW_EMP, to insert a new employee into the EMPLOYEES table. The
procedure should contain a call to the VALID_DEPTID function to check whether the
department ID specified for the new employee exists in the DEPARTMENTS table.
a. Create a function VALID_DEPTID to validate a specified department ID. The function
should return a BOOLEAN value.

CREATE OR REPLACE FUNCTION valid_deptid
(p_deptid IN departments.department_id%TYPE)
RETURN BOOLEAN
IS
v_dummy VARCHAR2(1);
BEGIN
SELECT ’x’
INTO v_dummy
FROM departments
WHERE department_id = p_deptid;
RETURN (TRUE);
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN (FALSE);
END valid_deptid;
----------------------------------------------------------------------------------------------------------------------------------------
b. Create the procedure NEW_EMP to add an employee to the EMPLOYEES table. A new row
should be added to EMPLOYEES if the function returns TRUE. If the function returns FALSE,
the procedure should alert the user with an appropriate message.
Define DEFAULT values for most parameters. The default commission is 0, the default salary
is 1000, the default department ID is 30, the default job is SA_REP and the default manager
number is 145. For the employee’s ID number, use the sequence EMPLOYEES _SEQ.
Provide the last name, first name and e-mail for the employee.

CREATE OR REPLACE PROCEDURE new_emp
(p_lname employees.last_name%TYPE,
p_fname employees.first_name%TYPE,
p_email employees.email%TYPE,
p_job employees.job_id%TYPE DEFAULT ’SA_REP’,
p_mgr employees.manager_id%TYPE DEFAULT 145,
p_sal employees.salary%TYPE DEFAULT 1000,
p_comm employees.commission_pct%TYPE DEFAULT 0,
p_deptid employees.department_id%TYPE DEFAULT 30)
IS
BEGIN
IF valid_deptid(p_deptid) THEN
INSERT INTO employees(employee_id, last_name, first_name,
email, job_id, manager_id, hire_date,
salary, commission_pct, department_id)
VALUES (employees_seq.NEXTVAL, p_lname, p_fname, p_email,
p_job, p_mgr, TRUNC (SYSDATE, ’DD’), p_sal,
p_comm, p_deptid);
ELSE
RAISE_APPLICATION_ERROR (-20204,
’Invalid department ID. Try again.’);
END IF;
END new_emp;
/
---------------------------------------------------------------------------------------------------------------------------------------
1. Create a package specification and body called JOB_PACK. (You can save the package body
and specification in two separate files.) This package contains your ADD_JOB, UPD_JOB, and
DEL_JOB procedures, as well as your Q_JOB function.
Note: Use the code in your previously saved script files when creating the package.
a. Make all the constructs public.
Note: Consider whether you still need the stand-alone procedures and functions you just
packaged.

CREATE OR REPLACE PACKAGE job_pack IS
PROCEDURE add_job
(p_jobid IN jobs.job_id%TYPE,
p_jobtitle IN jobs.job_title%TYPE);
PROCEDURE upd_job
(p_jobid IN jobs.job_id%TYPE,
p_jobtitle IN jobs.job_title%TYPE);
PROCEDURE del_job
(p_jobid IN jobs.job_id%TYPE);
FUNCTION q_job
(p_jobid IN jobs.job_id%TYPE)
RETURN VARCHAR2;
END job_pack;
/
Package Created.

CREATE OR REPLACE PACKAGE BODY job_pack IS
PROCEDURE add_job
(p_jobid IN jobs.job_id%TYPE,
p_jobtitle IN jobs.job_title%TYPE)
IS
BEGIN
INSERT INTO jobs (job_id, job_title)
VALUES (p_jobid, p_jobtitle);
END add_job;
PROCEDURE upd_job
(p_jobid IN jobs.job_id%TYPE,
p_jobtitle IN jobs.job_title%TYPE)
IS
BEGIN
UPDATE jobs
SET job_title = p_jobtitle
WHERE job_id = p_jobid;
IF SQL%NOTFOUND THEN
RAISE_APPLICATION_ERROR(-20202,’No job updated.’);
END IF;
END upd_job;
PROCEDURE del_job
(p_jobid IN jobs.job_id%TYPE)
IS
BEGIN
DELETE FROM jobs
WHERE job_id = p_jobid;
IF SQL%NOTFOUND THEN
RAISE_APPLICATION_ERROR (-20203,’No job deleted.’);
END IF;
END del_job;
FUNCTION q_job
(p_jobid IN jobs.job_id%TYPE)
RETURN VARCHAR2
IS
v_jobtitle jobs.job_title%TYPE;
BEGIN
SELECT job_title
INTO v_jobtitle
FROM jobs
WHERE job_id = p_jobid;
RETURN (v_jobtitle);
END q_job;
END job_pack;
/
Package Body Created.

EXECUTE job_pack.add_job(’IT_SYSAN’, ’Systems Analyst’)
PL/SQL procedure successfully completed.

c. Query the JOBS table to see the result.
SELECT * FROM jobs
WHERE job_id = ’IT_SYSAN’;
----------------------------------------------------------------------------------------------------------------------------------------
1. Changes to data are allowed on tables only during normal office hours of 8:45 a.m. until 5:30 p.m.,
Monday through Friday.
Create a stored procedure called SECURE_DML that prevents the DML statement from executing
outside of normal office hours, returning the message: “You may make changes only during normal
office hours.”

CREATE OR REPLACE PROCEDURE secure_dml
IS
BEGIN
IF TO_CHAR (SYSDATE, ’HH24:MI’) NOT BETWEEN ’08:45’ AND ’17:30’
OR TO_CHAR (SYSDATE, ’DY’) IN (’SAT’, ’SUN’)
THEN RAISE_APPLICATION_ERROR (-20205,
’You may make changes only during normal office hours’);
END IF;
END secure_dml;
2. a. Create a statement trigger on the JOBS table that calls the above procedure.
CREATE OR REPLACE TRIGGER secure_prod
BEFORE INSERT OR UPDATE OR DELETE ON jobs
BEGIN
secure_dml;
END secure_prod;
b.Test the procedure by temporarily modifying the hours in the procedure and attempting to insert
a new record into the JOBS table. After testing, reset the procedure hours as specified in step 1.
INSERT INTO jobs (job_id, job_title)
VALUES (’HR_MAN’, ’Human Resources Manager’);
------------------------------------------------------------------------------------------------------------------------------------------
3. Employees should receive an automatic increase in salary if the minimum salary for a job is
increased. Implement this requirement through a trigger on the JOBS table.
a. Create a stored procedure named UPD_EMP_SAL to update the salary amount. This procedure
accepts two parameters: the job ID for which salary has to be updated, and the new minimum
salary for this job ID. This procedure is executed from the trigger on the JOBS table.

CREATE OR REPLACE PROCEDURE upd_emp_sal
(p_jobid IN employees.job_id%TYPE,
p_minsal IN employees.salary%TYPE)
IS
BEGIN
UPDATE employees
SET salary = p_minsal
WHERE job_id = p_jobid
AND SALARY < p_minsal;
END upd_emp_sal;
/
b. Create a row trigger named UPDATE_EMP_SALARY on the JOBS table that invokes the
procedure UPD_EMP_SAL when the minimum salary in the JOBS table is updated for a
specified job ID.

CREATE OR REPLACE TRIGGER update_emp_salary
AFTER UPDATE OF min_salary ON jobs
FOR EACH ROW
BEGIN
upd_emp_sal(:NEW.job_id, :NEW.min_salary);
END;
/
c. Query the EMPLOYEES table to see the current salary for employees who are programmers.
SELECT last_name, first_name, salary
FROM employees
WHERE job_id = ’IT_PROG’;
-----------------------------------------------------------------------------------------------------------------------------------------
Business Rules

Rule 1. Sales managers and sales representatives should always receive commission. Employees
who are not sales managers or sales representatives should never receive a commission.
Ensure that this restriction does not validate the existing records of the EMPLOYEES
table. It should be effective only for the subsequent inserts and updates on the table.
Implement rule 1 with a constraint.

ALTER TABLE employees
ADD CONSTRAINT emp_comm_chk
CHECK ((job_id = ’SA_REP’ and commission_pct>0) OR
(job_id = ’SA_MAN’ and commission_pct>0) OR
(job_id != ’SA_REP’ and commission_pct=0))
NOVALIDATE;

Rule 2. The EMPLOYEES table should contain exactly one president.
Test your answer by inserting an employee record with the following details: employee ID
400, last name Harris, first name Alice, e-mail ID AHARRIS, job ID AD_PRES, hire
date SYSDATE , salary 20000, and department ID 20.
Note: You do not need to implement a rule for case sensitivity; instead, you need to test
for the number of people with the job title of President.
Implement rule 2 with a trigger.

CREATE OR REPLACE TRIGGER check_pres_title
AFTER INSERT OR UPDATE OF job_id ON employees
BEGIN
mgr_constraints_pkg.check_president;
END check_pres_title;
Trigger created.
INSERT INTO employees
(employee_id, last_name, first_name, email, job_id,
hire_date, salary, department_id)
VALUES (400,’Harris’,’Alice’, ’AHARRIS’, ’AD_PRES’,
SYSDATE, 20000, 20);

Rule 3. An employee should never be a manager of more than 15 employees.
Test your answer by inserting the following records into the EMPLOYEES table (perform a
query to count the number of employees currently working for manager 100 before inserting
these rows):
i. Employee ID 401, last name Johnson, first name Brian, e-mail ID BJOHNSON, job ID
SA_MAN, hire date SYSDATE , salary 11000, manager ID 100, and department ID
80. (This insertion should be successful, because there are only 14 employees
working for manager 100 so far.)
ii. Employee ID 402, last name Kellogg, first name Tony, e-mail ID TKELLOG, job ID
ST_MAN, hire date SYSDATE , salary 7500, manager ID 100, and department ID 50.
(This insertion should be unsuccessful, because there are already 15 employees working for
manager 100.)
Implement rule 3 with a trigger.

CREATE OR REPLACE TRIGGER set_mgr
AFTER INSERT or UPDATE of manager_id on employees
FOR EACH ROW
BEGIN
-- To get round MUTATING TABLE ERROR
mgr_constraints_pkg.new_mgr := :NEW.manager_id;
END set_mgr;

CREATE OR REPLACE TRIGGER chk_emps
AFTER INSERT or UPDATE of manager_id on employees
BEGIN
mgr_constraints_pkg.check_mgr;
-- if for some reason, SET_MGR is disabled,
-- the global variable is set to null
-- to stop the SELECT COUNT running
mgr_constraints_pkg.new_mgr := NULL;
END chk_emps;
INSERT INTO employees
(employee_id, last_name, first_name, email, job_id,
hire_date, salary, manager_id, department_id)
VALUES (401,’Johnson’,’Brian’, ’BJOHNSON’, ’SA_MAN’,
SYSDATE, 11000, 100, 80);
1 row created.

SELECT count(*)
FROM employees
WHERE manager_id = 100;
INSERT INTO employees
(employee_id, last_name, first_name, email, job_id,
hire_date, salary, manager_id, department_id)
VALUES (402,’Kellogg’,’Tony’, ’TKELLOGG’, ’ST_MAN’,
SYSDATE, 7500, 100, 50);

Rule 4. Salaries can only be increased, never decreased.
The present salary of employee 105 is 5000. Test your answer by decreasing the salary of
employee 105 to 4500.
Implement rule 4 with a trigger.

CREATE OR REPLACE TRIGGER check_sal
BEFORE UPDATE OF salary ON employees
FOR EACH ROW
WHEN (NEW.salary < OLD.salary)
BEGIN
RAISE_APPLICATION_ERROR(-20002,’Salary may not be reduced’);
END check_sal;
Trigger Created.
UPDATE employees
SET salary = 4500
Rule 5. If a department moves to another location, each employee of that department
automatically receives a salary raise of 2 percent.
View the current salaries of employees in department 90.
Test your answer by moving department 90 to location 1600. Query the new
salaries of employees of department 90.
Implement rule 5 with a trigger.

CREATE OR REPLACE TRIGGER change_location
BEFORE UPDATE OF location_id ON departments
FOR EACH ROW
BEGIN
mgr_constraints_pkg.new_location(:OLD.department_id);
END change_location;
Trigger created.
SELECT last_name, salary, department_id
FROM employees
WHERE department_id = 90;
WHERE employee_id = 105;
-------------------------------------------------------------------------------------------------------------------------------------------