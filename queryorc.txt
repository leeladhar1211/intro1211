https://www.toptal.com/sql/interview-questions
http://bageshkumarbagi-msbi.blogspot.sg/2016/05/tricky-sql-interview-questions-and.html
https://msbiskills.com/sql-puzzles-finding-outputs/
http://www.complexsql.com/complex-sql-queries-examples-with-answers/complex-sql-for-interviews/
https://msbiskills.com/category/sql-server/tricky-sql-queries/
https://www.c-sharpcorner.com/article/most-asked-sql-queries-in-interview-questions/
https://www.softwaretestinghelp.com/50-popular-sql-interview-questions-for-testers/
https://www.analyticsvidhya.com/blog/2017/01/46-questions-on-sql-to-test-a-data-science-professional-skilltest-solution/


The FROM/WHERE clause goes first.
ROWNUM is assigned and incremented to each output row from the FROM/WHERE clause.
SELECT is applied.
GROUP BY is applied.
HAVING is applied.
ORDER BY is applied.
--------------------------------------------------------------
delete from emp where dept_id =
(select dept_id from dept where dept_name like '%public%'); --deleting rows based on another table
---------------------------------------------------------------------------------------------------------------
comment on table emp is 'emp information';  -- comments can be viewed through (All_TAB_comments,user_tab_comments)
---------------------------------------------------------------------------------------------------------------------
oracle tables
ALL_COL_COMMENTS	--Comments on columns of accessible tables and views
ALL_CONSTRAINTS	    --Constraint definitions on accessible tables
ALL_DB_LINKS	    --Database links accessible to the user
ALL_ERRORS	        --Current errors on stored objects that user is allowed to create
ALL_INDEXES	        --Descriptions of indexes on tables accessible to the user
ALL_OBJECTS	        --Objects accessible to the user
ALL_OBJECT_TABLES	--Description of all object tables accessible to the user
ALL_TRIGGERS	    --Triggers accessible to the current user
DBA_DB_LINKS	    --All database links in the database
DBA_ROLE_PRIVS	    --Roles granted to users and roles
--------------------------------------------------------------------------------------------------------------------------
Employee   Emp# Manager Mgr# 
   BLAKE   7698 KING    7839 
   CLARK   7782 KING    7839 
   JONES   7566 KING    7839 
   MARTIN  7654 BLAKE   7698 
   ALLEN   7499 BLAKE   7698 
   TURNER  7844 BLAKE   7698 
   JAMES   7900 BLAKE   7698 
   WARD    7521 BLAKE   7698 
   FORD    7902 JONES   7566 
   SMITH   7369 FORD    7902 
   SCOTT   7788 JONES   7566 
   ADAMS   7876 SCOTT   7788 
   MILLER  7934 CLARK   7782 

SELECT ename, empno, (SELECT ename FROM EMP WHERE empno = mgr)AS MANAGER, mgr from emp order by empno;
SELECT e.ename, e.empno, m.ename as manager, e.mgr FROM emp e, emp m WHERE e.mgr = m.empno
--------------------------------------------------------------------------------------------------------------------------------
SELECT REGEXP_COUNT ('TechOnTheNet is a great resource', 't')
FROM dual;
Result: 2
----------------------------------------------------------------------------------------------------------------------------------
 Select Employee_name,Salary/12 as ‘Monthly Salary’ from employee; --monthly salary of an emplyee if annual salary is given
 Select * from Employee where Rownum =1; -- 1 st record from emp
 Select * from Employee where Rowid= select max(Rowid) from Employee; --last record from emp table 
 Select * from Employee  where rownum = &n;  -- to display Nth Record from Employee table
 Create table Employee_1 as Select * from Employee where 1=2;      --Can i create table with same structure of Employee table
 Select rownum,E.* from Employee E where rownum<=(Select count(*/2) from Employee); --selecting 50% records
 Select * from Employee;
 Intersect
 Select * from Employee1;    ---common records
 
 21.how to write sql query for the below scenario
I/p:ORACLE

O/p:
O
R
A
C
L
E
i.e, splitting into multiple columns a string using sql.

Answer:

Select Substr(‘ORACLE’,Level,1) From Dual
Connect By Level<= Length(‘ORACLE’);
------------------------------------------------------------------------------------------------------------------------------------
select * from Employee where To_char(Joining_date,’YYYY’)=’2017′; --fetching records who joined on 2017

Write an SQL Query find number of employees according to gender  whose DOB is between 01/01/1960 to 31/12/1975.
SELECT COUNT(*), sex from Employees WHERE DOB BETWEEN '01/01/1960' AND '31/12/1975' Group by sex

--------------------------------------------------------------------------------------------------------------------------------------
--hierarchical queries
Using hierarchical queries, you can retrieve records from a table by their natural relationship. Be it a family tree or a employee/manager tree or what ever.

Tree walking enables you to construct a hierarchical tree if the relationship lie in the same table. For instance, a manager column which exists in the emp table which defines the managerial hierarchy. 
CONNECT BY specifies the relationship between parent rows and child rows of the hierarchy.

SELECT last_name, employee_id, manager_id, LEVEL
      FROM employees
      START WITH employee_id = 100
      CONNECT BY PRIOR employee_id = manager_id
      ORDER SIBLINGS BY last_name;

LAST_NAME                 EMPLOYEE_ID MANAGER_ID      LEVEL
------------------------- ----------- ---------- ----------
King                              100                     1
Cambrault                         148        100          2
Bates                             172        148          3
Bloom                             169        148          3
Fox                               170        148          3
Kumar                             173        148          3
Ozer                              168        148          3
Smith                             171        148          3
De Haan                           102        100          2
Hunold                            103        102          3
Austin                            105        103          4
Ernst                             104        103          4
Lorentz                           107        103          4
Pataballa                         106        103          4
Errazuriz                         147        100          2
Ande                              166        147          3
Banda                             167        147          3

Query to get the product of all the values of a column :

SELECT EXP(SUM(LN(col1))) FROM srinu;
------------------------------------------------------------------------------------------------------------------------------------------
hi everyone , 
its a trick to copy the structure of the table wthout the
data . 
1 SQL> create table employee1 
2 as select * from emp
3 where 1=2;

the compiler will look for the statment 2 first 
then it will come to the 3 line to check the condition ,when
it gets a 0 [means false] at that time only the table
structure was there in the buffer ; now it will return to
the 1st statement to create a table with the structure only .
so it will return only the structure of the table . 
similarly when this 
SELET * 
FROM EMP 
WHERE 1=2;
querry is executed as per the false conditon it will only
show no rows selected . 
------------------------------------------------------------------------------------------------------------

XIX. SELECT Query for counting No of words :

SELECT ename,
NVL(LENGTH(REPLACE(TRANSLATE(UPPER(RTRIM(ename)),'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' ','    @'),' ',''))+1,1) word_length
FROM emp;

Explanation :
TRANSLATE(UPPER(RTRIM(ename)),'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' ','   @') -- This will translate all the characters FROM A-Z including a single quote to a space. It will also translate a space to a @. 
REPLACE(TRANSLATE(UPPER(RTRIM(ename)),'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' ','   @'),' ','') -- This will replace every space with nothing in the above result.
LENGTH(REPLACE(TRANSLATE(UPPER(RTRIM(ename)),'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' ','  @'),' ',''))+1 -- This will give u the count of @ characters in the above result.
-----------------------------------------------------------------------------------------------------------------------------------------
-- leap year
SELECT hiredate, TO_CHAR (hiredate, 'Day') weekday 
          FROM emp 
          WHERE is_leap_year (hiredate) = 'Y';

XXI. Query for removing all non-numeric :

SELECT 
TRANSLATE(LOWER(ssn),'abcdefghijklmnopqrstuvwxyz- ','') 
FROM DUAL;

Index

XXII. Query for translating a column values to INITCAP :

SELECT 
TRANSLATE(INITCAP(temp),
SUBSTR(temp, INSTR(temp,'''')+1,1), LOWER(SUBSTR(temp, INSTR(temp,'''')+1)))
FROM srinu1;
-----------------------------------------------------------------------------------------------------------------------------------------
XXX. Query to get the last Sunday of any month :

SELECT NEXT_DAY(LAST_DAY(TO_DATE('26-10-2001','DD-MM-YYYY')) - 7,'sunday') 
FROM DUAL;

XXXIV. Query to get the DB Name:

SELECT name FROM v$database;

Index

XXXV. Getting the current default schema :

SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') FROM DUAL;

Index

XXXVI. Query to get all the column names of a particular table :

SELECT column_name
FROM all_tab_columns
WHERE TABLE_NAME = 'ORDERS';

Index

XXXVII. How do I spool only the query result to a file in SQLPLUS :

Place the following lines of code in a file and execute the file in SQLPLUS :

set heading off
set feedback off
set colsep '        '
set termout off
set verify off
spool c:\srini.txt
SELECT empno,ename FROM emp; /* Write your Query here */
spool off
/
------------------------------------------------------------------------------------------------------------------------------------------
XXXVIII. Query for getting the current SessionID :

SELECT SYS_CONTEXT('USERENV','SESSIONID') Session_ID FROM DUAL; 

XXXX. Query to count no. Of columns in a table:

SELECT COUNT(column_name) 
FROM user_tab_columns 
WHERE table_name = 'MYTABLE';

XXXXVIII. How do you remove Trailing blanks in a spooled file :
Change the Environment Options Like this :
set trimspool on
set trimout on
--------------------------------------------------------------------------------------------------------------------------------------------- 

SELECT *
FROM   (SELECT product_code, quantity
        FROM   pivot_test)
PIVOT  (SUM(quantity) AS sum_quantity FOR (product_code) IN ('A' AS a, 'B' AS b, 'C' AS c));

A_SUM_QUANTITY B_SUM_QUANTITY C_SUM_QUANTITY
-------------- -------------- --------------
           210             90            160

1 row selected.

SELECT *
FROM   (SELECT customer_id, product_code, quantity
        FROM   pivot_test)
PIVOT  (SUM(quantity) AS sum_quantity FOR (product_code) IN ('A' AS a, 'B' AS b, 'C' AS c))
ORDER BY customer_id;

CUSTOMER_ID A_SUM_QUANTITY B_SUM_QUANTITY C_SUM_QUANTITY
----------- -------------- -------------- --------------
          1             10             20             30
          2             40                            50
          3             60             70             80
          4            100

4 rows selected.

SELECT customer_id,
       SUM(DECODE(product_code, 'A', quantity, 0)) AS a_sum_quantity,
       SUM(DECODE(product_code, 'B', quantity, 0)) AS b_sum_quantity,
       SUM(DECODE(product_code, 'C', quantity, 0)) AS c_sum_quantity
FROM   pivot_test
GROUP BY customer_id
ORDER BY customer_id;

CUSTOMER_ID A_SUM_QUANTITY B_SUM_QUANTITY C_SUM_QUANTITY
----------- -------------- -------------- --------------
          1             10             20             30
          2             40              0             50
          3             60             70             80
          4            100              0              0

4 rows selected.

SELECT *
FROM   unpivot_test
UNPIVOT (quantity FOR product_code IN (product_code_a AS 'A', product_code_b AS 'B', product_code_c AS 'C', product_code_d AS 'D'));

        ID CUSTOMER_ID P   QUANTITY
---------- ----------- - ----------
         1         101 A         10
         1         101 B         20
         1         101 C         30
         2         102 A         40
         2         102 C         50
         3         103 A         60
         3         103 B         70
         3         103 C         80
         3         103 D         90
         4         104 A        100

10 rows selected.


There are several things to note about the query:

The required column names, in this case QUANTITY and PRODUCT_CODE, are define in the UNPIVOT clause. These can be set to any name not currently in the driving table.
The columns to be unpivoted must be named in the IN clause.
The PRODUCT_CODE value will match the column name it is derived from, unless you alias it to another value.
By default the EXCLUDE NULLS clause is used. To override the default behaviour use the INCLUDE NULLS clause.

SELECT id,
       customer_id,
       DECODE(unpivot_row, 1, 'A',
                           2, 'B',
                           3, 'C',
                           4, 'D',
                           'N/A') AS product_code,
       DECODE(unpivot_row, 1, product_code_a,
                           2, product_code_b,
                           3, product_code_c,
                           4, product_code_d,
                           'N/A') AS quantity
FROM   unpivot_test,
       (SELECT level AS unpivot_row FROM dual CONNECT BY level <= 4)
ORDER BY 1,2,3;

        ID CUSTOMER_ID PRO   QUANTITY
---------- ----------- --- ----------
         1         101 A           10
         1         101 B           20
         1         101 C           30
         1         101 D
         2         102 A           40
         2         102 B
         2         102 C           50
         2         102 D
         3         103 A           60
         3         103 B           70
         3         103 C           80

        ID CUSTOMER_ID PRO   QUANTITY
---------- ----------- --- ----------
         3         103 D           90
         4         104 A          100
         4         104 B
         4         104 C
         4         104 D

16 rows selected.


Use SQL within group for moving rows onto one line and listagg to display multiple column values in a single column

select deptno, listagg (ename, ',') 
WITHIN GROUP 
(ORDER BY ename) enames
FROM emp
GROUP BY deptno

    DEPTNO ENAMES                                            
---------- --------------------------------------------------
        10 CLARK,KING,MILLER                                 
        20 ADAMS,FORD,JONES,SCOTT,SMITH                
        30 ALLEN,BLAKE,JAMES,MARTIN,TURNER,WARD     

•	Use the Oracle analytic Lag-Over Function

SELECT ename,hiredate,sal,LAG (sal, 1, 0)   
   OVER (ORDER BY hiredate) AS PrevSal
FROM emp
WHERE job = 'CLERK';

The Oracle/PLSQL LAG function is an analytic function that lets you query more than one row in a table at a time without having to join the table to itself. It returns values from a previous row in the table. To return a value from the next row, try using the LEAD function.

Syntax:

LAG ( expression [, offset [, default] ] )
OVER ( [ query_partition_clause ] order_by_clause )

-----------------------------------------------------------------

---sales on products query

0
down vote
favorite
I have a table which is like this.

id date       subtotal type
1 |2017-12-12 | 50.00 | 1
2 |2017-12-12 | 20.00 | 2
3 |2017-11-12 | 30.00 | 2
4 |2017-11-12 | 40.00 | 1
5 |2017-10-12 | 70.00 | 1
6 |2017-10-12 | 250.00| 2
In that case the type column presents sales (1) and buys(2). What I want to do is, group by this orders by month and get the total sale and buys at this month. Something like this.

id date        sale     buy
1 |December   | 50.00 | 20.00
2 |November   | 30.00 | 40.00
3 |October    | 70.00 | 250.00

select to_char(date,'Mon') as Month,
       extract(year from date) as Year,
       sum(case when type = 1 then subtotal else 0 end) as sales,
       sum(case when type = 2 then subtotal else 0 end) as buys
from table
group by Month, Year;

-- in a project i work at the moment we need to get monthly, quarterly and yearly sums of customer sales. i tried a query shown below which gets correct results for today. but i need to results for last years sale also. (last years monthly sale is that months sum)

This may help be what you want... it gives you totals for every month and quarter, and for the entire year, for every year. I would recommend adding a "where EXTRACT(YEAR FROM DAY) = 2012" or similar clause if you want a particular year.

I believe this is what you asked for, but that is different than the sample you provided. The sample you gave provided trailing 3, 6, 9, and 12 month sales, which is not the same as quarters years and months. Still, you could easily mix and match if needed.

SELECT    
CUSTOMER,        
PRODUCT,
EXTRACT(YEAR FROM DAY) YEAR,
SUM(DAILY_SALE) as YEAR_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '01' THEN DAILY_SALE ELSE 0 END) AS MONTH_01_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '02' THEN DAILY_SALE ELSE 0 END) AS MONTH_02_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '03' THEN DAILY_SALE ELSE 0 END) AS MONTH_03_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '04' THEN DAILY_SALE ELSE 0 END) AS MONTH_04_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '05' THEN DAILY_SALE ELSE 0 END) AS MONTH_05_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '06' THEN DAILY_SALE ELSE 0 END) AS MONTH_06_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '07' THEN DAILY_SALE ELSE 0 END) AS MONTH_07_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '08' THEN DAILY_SALE ELSE 0 END) AS MONTH_08_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '09' THEN DAILY_SALE ELSE 0 END) AS MONTH_09_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '10' THEN DAILY_SALE ELSE 0 END) AS MONTH_10_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '11' THEN DAILY_SALE ELSE 0 END) AS MONTH_11_SALES,
SUM(CASE WHEN TO_CHAR(DAY, 'MM') = '12' THEN DAILY_SALE ELSE 0 END) AS MONTH_12_SALES,
SUM(
    CASE
        WHEN TO_CHAR(DAY, 'MM') IN ('10', '11', '12')
        THEN DAILY_SALE
        ELSE 0
    END) AS Q4_SALES,
SUM(
    CASE
        WHEN TO_CHAR(DAY, 'MM') IN ('07', '08', '09')
        THEN DAILY_SALE
        ELSE 0
    END) AS Q3_SALES,
SUM(
    CASE
        WHEN TO_CHAR(DAY, 'MM') IN ('04', '05', '06')
        THEN DAILY_SALE
        ELSE 0
    END) AS Q2_SALES,
SUM(
    CASE
        WHEN TO_CHAR(DAY, 'MM') IN ('01', '02', '03')
        THEN DAILY_SALE
        ELSE 0
    END) AS Q1_SALES,
FROM
SALES_TABLE
GROUP BY
CUSTOMER,
PRODUCT,
EXTRACT(YEAR FROM DAY)
--------------------------------------------------------------------------------------------------------------------------------------
-- rollup and cube and grouping_id

SELECT fact_1_id,
       fact_2_id,
       SUM(sales_value) AS sales_value
FROM   dimension_tab
GROUP BY ROLLUP (fact_1_id, fact_2_id)
ORDER BY fact_1_id, fact_2_id;

 FACT_1_ID  FACT_2_ID SALES_VALUE
---------- ---------- -----------
         1          1     4363.55
         1          2     4794.76
         1          3     4718.25
         1          4     5387.45
         1          5     5027.34
         1               24291.35
         2          1     5652.84
         2          2     4583.02
         2          3     5555.77
         2          4     5936.67
         2          5     4508.74
         2               26237.04
                         50528.39

SELECT fact_1_id,
       fact_2_id,
       SUM(sales_value) AS sales_value
FROM   dimension_tab
GROUP BY CUBE (fact_1_id, fact_2_id)
ORDER BY fact_1_id, fact_2_id;

 FACT_1_ID  FACT_2_ID SALES_VALUE
---------- ---------- -----------
         1          1     4363.55
         1          2     4794.76
         1          3     4718.25
         1          4     5387.45
         1          5     5027.34
         1               24291.35
         2          1     5652.84
         2          2     4583.02
         2          3     5555.77
         2          4     5936.67
         2          5     4508.74
         2               26237.04
                    1    10016.39
                    2     9377.78
                    3    10274.02
                    4    11324.12
                    5     9536.08
                         50528.39

18 rows selected.

SELECT fact_1_id,
       fact_2_id,
       SUM(sales_value) AS sales_value,
       GROUPING(fact_1_id) AS f1g, 
       GROUPING(fact_2_id) AS f2g
FROM   dimension_tab
GROUP BY CUBE (fact_1_id, fact_2_id)
ORDER BY fact_1_id, fact_2_id;

 FACT_1_ID  FACT_2_ID SALES_VALUE        F1G        F2G
---------- ---------- ----------- ---------- ----------
         1          1     4363.55          0          0
         1          2     4794.76          0          0
         1          3     4718.25          0          0
         1          4     5387.45          0          0
         1          5     5027.34          0          0
         1               24291.35          0          1
         2          1     5652.84          0          0
         2          2     4583.02          0          0
         2          3     5555.77          0          0
         2          4     5936.67          0          0
         2          5     4508.74          0          0
         2               26237.04          0          1
                    1    10016.39          1          0
                    2     9377.78          1          0
                    3    10274.02          1          0
                    4    11324.12          1          0
                    5     9536.08          1          0
                         50528.39          1          1

18 rows selected.

SELECT fact_1_id,
       fact_2_id,
       SUM(sales_value) AS sales_value,
       GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id
FROM   dimension_tab
GROUP BY CUBE (fact_1_id, fact_2_id)
ORDER BY fact_1_id, fact_2_id;

 FACT_1_ID  FACT_2_ID SALES_VALUE GROUPING_ID
---------- ---------- ----------- -----------
         1          1     4363.55           0
         1          2     4794.76           0
         1          3     4718.25           0
         1          4     5387.45           0
         1          5     5027.34           0
         1               24291.35           1
         2          1     5652.84           0
         2          2     4583.02           0
         2          3     5555.77           0
         2          4     5936.67           0
         2          5     4508.74           0
         2               26237.04           1
                    1    10016.39           2
                    2     9377.78           2
                    3    10274.02           2
                    4    11324.12           2
                    5     9536.08           2
                         50528.39           3

18 rows selected.

SELECT fact_1_id,
       fact_2_id,
       SUM(sales_value) AS sales_value,
       GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id,
       GROUP_ID() AS group_id
FROM   dimension_tab
GROUP BY GROUPING SETS(fact_1_id, CUBE (fact_1_id, fact_2_id))
HAVING GROUP_ID() = 0
ORDER BY fact_1_id, fact_2_id;

 FACT_1_ID  FACT_2_ID SALES_VALUE GROUPING_ID   GROUP_ID
---------- ---------- ----------- ----------- ----------
         1          1     4363.55           0          0
         1          2     4794.76           0          0
         1          3     4718.25           0          0
         1          4     5387.45           0          0
         1          5     5027.34           0          0
         1               24291.35           1          0
         2          1     5652.84           0          0
         2          2     4583.02           0          0
         2          3     5555.77           0          0
         2          4     5936.67           0          0
         2          5     4508.74           0          0
         2               26237.04           1          0
                    1    10016.39           2          0
                    2     9377.78           2          0
                    3    10274.02           2          0
                    4    11324.12           2          0
                    5     9536.08           2          0
                         50528.39           3          0

18 rows selected.
---------------------------------------------------------------------------------------------------------------------------------------------------





1) How to find all the links in a folder in UNIX or Linux ?
This is a tricky UNIX question as there is no specific command to find all symbolic links. Though you have ln command for creating and updating soft links but nothing which gives you all the links in a directory. You need to use ls command which list everything in directory and then you need to list all the links, as they starts with "l" as first characters, as shown in above article .

here is the actual UNIX command to find all links in a directory :

linux@nyj872:~ ls -lrt
total 2.0K
-rw-r--r--  1 Linux Domain Users  0 Dec  6  2011 a
drwxr-xr-x+ 1 Linux Domain Users  0 Sep 19 12:30 java/
lrwxrwxrwx  1 Linux Domain Users  4 Sep 19 12:31 version_1.0 -> java/

linux@nyj872:~ ls -lrt | grep '^l'
lrwxrwxrwx  1 Linux Domain Users  4 Sep 19 12:31 version_1.0 -> java/

2) How to find a process and kill that ?
Another classic UNIX interview questions. Answer of this question is simple if you are familiar with ps, grep and kill command. by using "ps -ef" you can get list of all process and then use grep to find your process and get the PID of that process. Once you got PID you can use kill command to kill that process as shown in this example of kill command in UNIX.


3) How to run a program in background in UNIX or Linux ?
an easy UNIX or Linux interview question, only when you know. You can use &amp; to run any process in background and than you can use jobs to find the job id for that process and can use  fg and bg command to bring that process into foreground and background.

4) How to sort output of a command in reverse order in Linux or UNIX ?
One more Linux command interview question which checks knowledge of frequently used command. you can use sort command in UNIX to sort output of any command by using PIPE. By using -r option with sort command you can sort output of any command in reverse order. See these sort command examples for more details.

5) How to create archive file in UNIX or Linux Operating System ?
Another interview question based on knowledge of UNIX or Linux command. you can use tar command to great archives in UNIX or Linux. you can even combine tar and gzip to create a compressed archive in UNIX.

6) What is meaning of a file has 644 permission ?
To answer this UNIX or Linux interview question, you must know basics of files and directories in UNIX.  644 represents permission 110 for owner, permission 100 for group and 100 for others which means read + write for owner who create that file and read only permission for group and others. See this tutorial on UNIX file permission for more details.

7) How will you remove empty files or directories from /tmp ?
See how to delete empty directory and files in UNIX to answer this UNIX command interview questions.

8) I have read permission on a directory but I am not able to enter it why ?
One more tricky UNIX questions. In order to get into a directory you need execute permission. if your directory does not have execute permission than you can not go into that directory by using cd command. read UNIX files and directory permissions for more information.

9) How do you find all files which are modified 10 minutes before ?
This is another the Linux interview questions from frequently used command e.g. find and grep. you can use -mtime option of find command to list all the files which are modified 10 or m minutes before. see these find command examples for more details.

10) How to do you find size of directory in UNIX or Linux ?
This is another tricky and bit tough Linux interview question as popular ls command doesn't show complete size of directories in UNIX. you need to use du command to get full size of directories including all sub directories in UNIX. See How to find directory size in UNIX for exact command and detailed explanation.

 

 
Q. What is the main role of a primary key in a table?
 
A. The main role of a primary key in a data table is to maintain the internal integrity of a data table.
 
Q. What are foreign keys?
 
A.Foreign key, also called a foreign keyword, in a database table is a key from another table that refers to (or targets) a specific key, usually the primary key, in the table being used. A primary key can be targeted by multiple foreign keys from other tables. But a primary key does not necessarily have to be the target of any foreign keys.
 
A. Foreign Key : You can logically relate data from multiple tables using Foreign Keys 
 
Q. Can a table have more than one foreign key defined?
 
A. A table can have any number of foreign keys defined. It can have only one primary key defined.
 
Q. What is difference between UNIQUE and PRIMARY KEY constraints? 
 
A table can have only one PRIMARY KEY whereas there can be any number of   UNIQUE keys. 
The columns that compose PK are automatically define NOT NULL, whereas a column that compose a UNIQUE KEY can have null values.
 
Q. Can a primary key contain more than one columns? 
 
Yes. Primary key created on more than one column is called composite primary key.
 
Constraints

The Oracle Server uses constraintsto prevent invalid data entry into tables.
You can use constraints to do the following:
• Enforce rules on the data in a table whenever a row is inserted, updated, or deleted from that
table. The constraint must be satisfied for the operation to succeed.
• Prevent the deletion of a table if there are dependencies from other tables
• Provide rules for Oracle tools, such as Oracle Developer
 
CONSTRAINTS  
 
PRIMARY CONSTRAINTS      : PRIMARY,UNIQUE,CHECK,REFERENCES)
SECONDARY CONSTRAINTS    : NOT NULL,DEFAULT)
 
CONSTRAINTS BASED ON  2 LEVELS COLUMN LEVEL and  TABLE LEVEL
 
Eg. For SECONDARY CONSTRAINTS
~~~~~~~~~~~~~~~~~~~~~~~
 
1. NOT NULL CONSTRAINT
 
         CREATE TABLE EMP9( ENO NUMBER(3)  NOT NULL,
           ENAME VARCHAR2(10));
 
 
   2. DEFAULT CONSTRAINT
 
      CREATE TABLE EMP9(ENO NUMBER(3)  NOT NULL,
        ENAME VARCHAR2(10),DOJ DATE DEFAULT SYSDATE);
 
   3. PRIMARY CONSTRAINT(COLUMN LEVEL)
      
      UNIQUE
 
      CREATE TABLE EMP9( ENO NUMBER(3)  NOT NULL CONSTRAINT UNIEMP
        UNIQUE,ENAME VARCHAR2(10));
 
      PRIMARY KEY
 
  CREATE TABLE EMP9( ENO NUMBER(3)   CONSTRAINT PKEMP9 PRIMARY                              KEY,ENAME VARCHAR2(10));
 
   4. CHECK CONSTRAINT
 
      CREATE TABLE BANK( ACNO NUMBER(2) CONSTRAINT PKBANK PRIMARY                                              KEY,ACTYPE VARCHAR2(2) CONSTRAINT CKBANK CHECK (ACTYPE IN 
        ('SB','CA','RD')),ACNAME VARCHAR2(10),AMOUNT NUMBER(4));
 
 
   5. REFERENCES
 
      CREATE TABLE EMP9( ENO NUMBER(3) CONSTRAINT PKE9 PRIMARY       KEY,JOB VARCHAR2(10),ENAME VARCHAR2(10),MGR NUMBER(4) REFERENCES EMP9(ENO));
 
   6. REFERENCES(REFERING TO DIFFERENT TABLE)
      
      CREATE TABLE DEPT9(DEPTNO NUMBER(2) CONSTRAINT PKDNO PRIMARY  KEY, DNAME VARCHAR2(10), LOC VARCHAR2(10));
 
 
      CREATE TABLE EMP9( EMPNO NUMBER(4),ENAME VARCHAR2(10),
       SAL NUMBER(7,2),DEPTNO NUMBER(2) CONSTRAINT FKDNO REFERENCES DEPT9(DEPTNO));
 
7. TABLE LEVEL CONSTRAINTS
 
     UNIQUE  TABLE LEVEL
 
CREATE TABLE BANK( ACNO NUMBER(3),ACTYPE VARCHAR2(10),
        BAL NUMBER(7,2),PLACE VARCHAR2(10),CONSTRAINT UNIBANK          UNIQUE(ACNO,ACTYPE));
 
     PRIMARY KEY(TABLE LEVEL)
      
CREATE TABLE BANK( ACNO NUMBER(2), ACTYPE VARCHAR2(2) CONSTRAINT   CKBANK CHECK (ACTYPE IN ('SB','CA','RD')),AMOUNT NUMBER)
 
 
DATA Integrity Constraints 
 
Constraint Description
Describe  the  different  type  of  Integrity Constraints supported by ORACLE ? NOT NULL Constraint    - Disallows NULLs in a table's column.UNIQUE   Constraint      - Disallows duplicate values in a column or set of columns.PRIMARY  KEY  Constraint - Disallows duplicate values and NULLs in a column or set of columns.FOREIGN  KEY   Constrain - Require each value in a column or set of columns match a value in a related table's UNIQUE or PRIMARY KEY.CHECK  Constraint        - Disallows values that do not satisfy the logical expression of the constraint.
 
What is difference between UNIQUE constraint and PRIMARY KEY constraint? A  column  defined  as   UNIQUE can contain NULLs while a column defined as PRIMARY KEY can't contain Nulls.
 
What are the Limitations of a CHECK Constraint ? The  condition  must  be a Boolean expression evaluated using the values in the row being inserted or updated and can't contain subqueries, sequence, the SYSDATE,UID,USER  or  USERENV  SQL functions, or the pseudo columns LEVEL or ROWNUM.  What is the maximum number of CHECK constraints that can be defined on a column ? No Limit.
 
Q What is an Index ?
An Index  is  an optional structure associated with a table to have direct access  to  rows, which  can  be created to increase the performance of data retrieval.  Index can be created on one or more columns of a table.
 
Indexes are  automatically maintained and used by ORACLE. Changes to table data are automatically incorporated into all relevant indexes.
 
Indexes 
 
n  Index will improve the throughput of the SQL Query.
n  The Index should be created based on the frequently used columns in the WHERE clause.
 
CREATE INDEX emp_idx ON emp(emp_name);
 
SELECT ename,dept_id,sal,mgr
FROM   EMP
WHERE  ename like ‘Sun%’;
 
 

 
Q. What are the advantages of Views ?
• Views restrict access to the data because the view can display selective columns from the table.
• Views can be used to make simple queries to retrieve the results of complicated queries. For example, views can be used to query information from multiple tables without the user knowing how to write a join statement.
• Views provide data independence for ad hoc users and application programs. One view can be used to retrieve data from several tables.
• Views provide groups of users access to data according to their particular criteria.
Provide  an  additional level of table security, by restricting access to a predetermined set of rows and columns of a table.
Hide data complexity.
Simplify commands for the user.
Present the data in a different perpecetive from that of the base table.
Store complex queries.
 
Q. What are various privileges that a user can grant to another user?  
SELECT
CONNECT
RESOURCES
 
Q. What is schema?
A schema is collection of database objects of a User.
 
Q. what is Table ?
A table is the basic unit of data storage in an ORACLE database. The tables of a database hold all of the user accessible data. Table data is stored in rows and columns.
 
Q. Do View contain Data?
Views do not contain or store data.
 
Q. Can a View based on another View ?
Yes.
 
Q. What is a Sequence ?
A  sequence generates a serial list of unique numbers for numerical columns of a database's tables.
 
Q.  What is a Synonym ?
A synonym is an alias for a table, view, sequence or program unit.
 
There are two types of Synonyms Private and Public.
A Private Synonyms can be accessed only by the owner.
A Public synonyms can be accessed by any user on the database.
 
Synonyms are used to : Mask the real name and owner of an object.
Provide public access to an object
Provide location transparency for tables,views or program units of a remote database.
Simplify the SQL statements for database users.
 

 
Q.  What  is  difference  between  CHAR  and VARCHAR2 ? , What is the maximum SIZE allowed for each type ?
 
CHAR  pads  blank spaces to the maximum length. VARCHAR2 does not pad blank spaces. For CHAR it is 255 and 2000 for VARCHAR2.
 
Q.   How  many LONG columns are allowed in a table ? Is it possible to use LONG columns in WHERE clause or ORDER BY ?
 
A    Only one LONG columns is allowed. It is not possible to use LONG column in WHERE or ORDER BY clause.
 
Q. What is  Database Link ?
 
A database link is a named object that describes a "path" from one database to another.
     
Private Database Link, Public Database Link & Network Database Link.
 
Private  database  link  is created on behalf of a specific user. A private database  link  can  be  used  only  when the owner of the link specifies a global  object  name in a SQL statement or in the definition of the owner's views or procedures.
 
Public database link is created for the special user group PUBLIC. A public database  link  can  be  used  when  any  user  in  the associated database specifies a global object name in a SQL  statement or object definition.
 
Network database link is created and managed by a network domain service. A network  database  link  can  be  used when any user of any database in the network  specifies  a  global  object  name  in  a  SQL statement or object definition.
 

 
Q. What is the highest value that can be stored in a BYTE data field?
 
A. The highest value that can be stored in a BYTE field is 255. or from -128 to 127. Byte is a set of Bits that represent a single character. Usually there are 8 Bits in a Byte, sometimes more, depending on how the measurement is being made. Each Char requires one byte of memory and can have a value from 0 to 255 (or 0 to 11111111 in binary).
 
 
 
 
What is a Procedure ?A  Procedure consist of a set of SQL and PL/SQL statements that are grouped together  as a unit to solve a specific problem or perform a set of related tasks.
 
 
Q. What is a stored procedure?
A. A procedure is a group of PL/SQL statements that can be called by a name. Procedures do not return values they perform tasks.
 
Q. Describe how NULLs work in SQL?
A. The NULL is how SQL handles missing values. 
      Arifthmetic operation with NULL in SQL will return a NULL.
 
What is a SNAPSHOT ?Snapshots  are  read-only copies of a master table located on a remote node which  is  periodically  refreshed  to  reflect  changes made to the master table. 135. What is a SNAPSHOT LOG ?A  snapshot  log  is a table in the master database that is associated with the  master  table.  ORACLE uses a snapshot log to track the rows that have been  updated  in  the master table. Snapshot logs are used in updating the snapshots based on the master table. 
 
Q. What is Normalization?
A. The process of table design is called normalization.
 
Q. What is referential integrity constraints?
A. Referential integrity constraints are rules
       that are partnof the table in a database schema.
 
What is Database Trigger ?A Database Trigger is procedure (set of SQL  and PL/SQL statements) that is automatically  executed  as  a  result of an insert in,update to, or delete from a table. Q. What are the uses of Database Trigger ?Database  triggers  can  be  used  to automatic data generation, audit data modifications, enforce complex Integrity constraints, and customize complex security authorizations. Q.  What  are  the  differences  between  Database  Trigger and Integrity constraints ?A  declarative  integrity constraint is a statement about the database that is  always true. A constraint applies to existing data in the table and any statement that manipulates the table. A  trigger  does  not  apply  to  data  loaded before the definition of the trigger,  therefore,  it does not guarantee all data in a table conforms to the rules established by an associated trigger. A  trigger  can  be  used  to  enforce  transitional constraints where as a declarative integrity constraint cannot be used.
 
 
Q. Which of the following WHERE clauses will return only rows
 that have a NULL in the PerDiemExpenses column?
A.   WHERE PerDiemExpenses <> 
B.   WHERE PerDiemExpenses IS NULL
C.   WHERE PerDiemExpenses = NULL
D.   WHERE PerDiemExpenses NOT IN (*) 
 
      A. B is correct ï¿½ When searching for a NULL value in a column, you must
 use the  keyword IS. No quotes are required around the keyword NULL.
 
Q. You issue the following query:
SELECT FirstName FROM StaffList
WHERE FirstName LIKE'_A%'
Which names would be returned by this query? Choose all that apply.
A.   Allen
B.   CLARK
C.   JACKSON
D.   David
 
      A. C is correct ï¿½ Two wildcards are used with the LIKE operator. 
The underscore (_) stands for any one character of any 
case, and the percent sign (%) stands for any number of 
characters of any case including none. Because this string 
starts with an underscore rather than a percent sign, it won't 
return Allen or Clark because they represent zero and two 
characters before the "A". If the LIKE string had been "%A%", 
both of these values would have been returned. 
David was not returned because all non-wild card characters 
are case sensitive. Therefore, only strings 
with an uppercase "A" as their second letter are returned
 

 
Q.  Which function do you use to remove all padded characters 
to the right of a character value in a column with a char datatype?
A.   RTRIM
B.   RPAD
C.   TRIM
 
     A.  C ï¿½ The TRIM function is used to remove padded spaces. 
LTRIM and RTRIM functions were included in earlier versions 
of Oracle, but Oracle 8i has replaced them with a single 
TRIM function 
 
Q. Which statement do you use to eliminate padded spaces
 between the month and day values in a function TO_CHAR(SYSDATE,'Month, DD, YYYY') ?
 
A. To remove padded spaces, you use the "fm" 
prefix before the date element that contains the spaces.
     TO_CHAR(SYSDATE,'fmMonth DD, YYYY') 
 
Q. Is the WHERE clause must appear always before the GROUP BY clause in SQL SELECT ?
 
A. Yes.
 
The proper order for SQL SELECT 
clauses is: SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY. 
Only the SELECT and FROM clause are mandatory.
 
Q. How Oracle executes a statement with nested subqueries?
 
A. When Oracle executes a statement with nested subqueries,
it always executes the innermost query first. This query passes its results to the next query and so on until it reaches the outermost query. It is the outermost query that returns a result set.
 
Q. Which operator do you use to return all of the rows 
from one query except rows are returned in a second query?
 
A. You use the MINUS operator to return all rows from one query except where duplicate rows are found in a second query. The UNION operator returns all rows from both queries minus duplicates. The UNION ALL operator returns all rows from both queries including duplicates. The INTERSECT operator returns only those rows that exist in both queries. 
 
 
Group functions: Group functions operate on sets of rows to give one result per group 
 
Count function : COUNT(*) returns the number of rows in a table.

SELECT COUNT(*)FROM employees
WHERE department_id = 50;

Having clause 
If you restrict rows based on the result of a group function, you must have a GROUP BY clause as well as the HAVING clause.

SELECT department_id, MAX(salary)
FROM employees
GROUP BY department_id
HAVING MAX(salary)>10000 ;


 
 
Q. Describe TO_DATE function.
A. The TO_DATE function returns a timestamp from a character string that has been interpreted using a character template.TO_DATE is a synonym for TIMESTAMP_FORMAT.
 
Write a syntax for To_Date function 
 
To_date('2003/07/09', 'yyyy/mm/dd') would return a date value of July 9, 2003. 
To_date('070903', 'MMDDYY') would return a date value of July 9, 2003. 
To_date('20020315', 'yyyymmdd') would return a date value of Mar 15, 2002.
 
SELECT TO_DATE('January 15','MONTH DD') "Sample" FROM DUAL

